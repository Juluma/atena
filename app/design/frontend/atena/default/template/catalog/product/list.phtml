<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @category    design
 * @package     atena_default
 * @copyright   Copyright (c) 2006-2015 X.commerce, Inc. (http://www.magento.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
/**
 * Product list template
 *
 * @see Mage_Catalog_Block_Product_List
 */
/* @var $this Mage_Catalog_Block_Product_List */
?>
<?php
    $_productCollection=$this->getLoadedProductCollection();
    $_helper = $this->helper('catalog/output');
?>
<?php if(!$_productCollection->count()): ?>
<p class="note-msg"><?php echo $this->__('There are no products matching the selection.') ?></p>
<?php else: ?>
<div class="category-products">
    <?php //echo $this->getToolbarHtml() ?>
    <?php // List mode ?>
    <?php if ($this->getMode() != 'grid'): ?>
    <?php $_iterator = 0; ?>
    <ol class="products-list" id="products-list">
    <?php foreach ($_productCollection as $_product): ?>
        <li class="item<?php if( ++$_iterator == sizeof($_productCollection) ): ?> last<?php endif; ?>">
            <?php // Product Image ?>
            <a href="<?php echo $_product->getProductUrl() ?>" title="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>" class="product-image">
                <?php /* Based on the native RWD styling, product images are displayed at a max of ~400px wide when viewed on a
                        one column page layout with four product columns from a 1280px viewport. For bandwidth reasons,
                        we are going to serve a 300px image, as it will look fine at 400px and most of the times, the image
                        will be displayed at a smaller size (eg, if two column are being used or viewport is smaller than 1280px).
                        This $_imgSize value could even be decreased further, based on the page layout
                        (one column, two column, three column) and number of product columns. */ ?>
                <?php $_imgSize = 300; ?>
                <img id="product-collection-image-<?php echo $_product->getId(); ?>"
                     src="<?php echo $this->helper('catalog/image')->init($_product, 'small_image')->keepFrame(false)->resize($_imgSize); ?>"
                     alt="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>" />
            </a>
            <?php // Product description ?>
            <div class="product-shop">
                <div class="f-fix">
                    <div class="product-primary">
                        <?php $_productNameStripped = $this->stripTags($_product->getName(), null, true); ?>
                        <h2 class="product-name"><a href="<?php echo $_product->getProductUrl() ?>" title="<?php echo $_productNameStripped; ?>"><?php echo $_helper->productAttribute($_product, $_product->getName() , 'name'); ?></a></h2>
                        <?php if($_product->getRatingSummary()): ?>
                        <?php echo $this->getReviewsSummaryHtml($_product) ?>
                        <?php endif; ?>
                        <?php
                        // Provides extra blocks on which to hang some features for products in the list
                        // Features providing UI elements targeting this block will display directly below the product name
                        if ($this->getChild('name.after')) {
                            $_nameAfterChildren = $this->getChild('name.after')->getSortedChildren();
                            foreach ($_nameAfterChildren as $_nameAfterChildName) {
                                $_nameAfterChild = $this->getChild('name.after')->getChild($_nameAfterChildName);
                                $_nameAfterChild->setProduct($_product);
                                echo $_nameAfterChild->toHtml();
                            }
                        }
                        ?>
                    </div>
                    <div class="product-secondary">
                        <?php echo $this->getPriceHtml($_product, true) ?>
                    </div>
                    <div class="product-secondary">
                        <?php if(!$_product->canConfigure() && $_product->isSaleable()): ?>
                            <p class="action"><button type="button" title="<?php echo $this->quoteEscape($this->__('Add to Cart')) ?>" class="button btn-cart" onclick="setLocation('<?php echo $this->getAddToCartUrl($_product) ?>')"><span><span><?php echo $this->__('Add to Cart') ?></span></span></button></p>
                        <?php elseif($_product->getStockItem() && $_product->getStockItem()->getIsInStock()): ?>
                            <p class="action"><a title="<?php echo $this->quoteEscape($this->__('View Details')) ?>" class="button" href="<?php echo $_product->getProductUrl() ?>"><?php echo $this->__('View Details') ?></a></p>
                        <?php else: ?>
                            <p class="action availability out-of-stock"><span><?php echo $this->__('Out of stock') ?></span></p>
                        <?php endif; ?>
                        <ul class="add-to-links">
                            <?php if ($this->helper('wishlist')->isAllow()) : ?>
                                <li><a href="<?php echo $this->helper('wishlist')->getAddUrl($_product) ?>" class="link-wishlist"><?php echo $this->__('Add to Wishlist') ?></a></li>
                            <?php endif; ?>
                            <?php if($_compareUrl=$this->getAddToCompareUrl($_product)): ?>
                                <li><span class="separator">|</span> <a href="<?php echo $_compareUrl ?>" class="link-compare"><?php echo $this->__('Add to Compare') ?></a></li>
                            <?php endif; ?>
                        </ul>
                    </div>
                    <div class="desc std">
                        <?php echo $_helper->productAttribute($_product, $_product->getShortDescription(), 'short_description') ?>
                        <a href="<?php echo $_product->getProductUrl() ?>" title="<?php echo $_productNameStripped ?>" class="link-learn"><?php echo $this->__('Learn More') ?></a>
                    </div>
                </div>
            </div>
        </li>
    <?php endforeach; ?>
    </ol>
    <script type="text/javascript">decorateList('products-list', 'none-recursive')</script>

    <?php else: ?>

    <?php // Grid Mode ?>

    <?php $_collectionSize = $_productCollection->count() ?>
    <?php $_columnCount = $this->getColumnCount(); ?>
    <ul class="products-grid products-grid--max-<?php echo $_columnCount; ?>-col">
        <?php $i = 0; foreach ($_productCollection as $_product): ?>
            <li class="item<?php if(($i - 1) % $_columnCount == 0): ?> first<?php elseif ($i % $_columnCount == 0): ?> last<?php endif; ?>"<?php echo ' data-product="' . $_product->getId() . '"';?>>
                <a href="<?php echo $_product->getProductUrl() ?>" title="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>" class="product-image">
                    <?php $_imgSize = 286; ?>
                    <img id="product-collection-image-<?php echo $_product->getId(); ?>"
                         src="<?php echo $this->helper('catalog/image')->init($_product, 'small_image')->resize($_imgSize); ?>"
                         alt="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>" />
                </a>
                <div class="product-info">
                    <?php $full_name = $_helper->productAttribute($_product, $_product->getName(), 'name'); ?>
                    <?php //$name_parts = explode(',', $full_name, 2); ?>
                    <h3 class="product-name"><a href="<?php echo $_product->getProductUrl() ?>" title="<?php echo $this->stripTags($_product->getName(), null, true) ?>"><?php echo $full_name; ?></a>&nbsp;</h3>
                    <?php 
                    /*if (isset($name_parts[1])) { ?>
                        <div class="subtitle"><?php echo $name_parts[1]; ?></div>
                    <?php } 
                    */                    
                    if ($author_names = Mage::app()->getCache()->load('author_names_'.$_product->getId())) {
                        $author_names = unserialize($author_names);
                    } else {
                        $categoryCollection = $_product->getCategoryCollection();
                        $authors = [];
                        foreach ($categoryCollection as $_category) {
                            if ($_category->getParentId() == 20) {
                                $aData = Mage::getModel('catalog/category')->load($_category->getId())->getData();
                                $name = ($aData['your_attribute_code']) ? $aData['your_attribute_code'] : '';
                                $name.= ($aData['sukunimi'] && $name != '') ? ' ' . $aData['sukunimi'] : $aData['sukunimi'];
                                $authors[] = $name;
                            }
                        }
                        $replace = ", ";
                        $author_names = implode($replace, $authors);
                        $pos = strrpos($author_names, ", ");
                        if ($pos !== false) $author_names = substr_replace($author_names, ' & ', $pos, strlen($replace));

                        Mage::app()->getCache()->save(serialize($author_names), 'author_names_'.$_product->getId());
                    }
                     // htmlspecialchars()
                    ?>
                    <h4 class="product-authors"><?php echo htmlentities($author_names); ?> &nbsp;</h4>
                    <?php
                    // Provides extra blocks on which to hang some features for products in the list
                    // Features providing UI elements targeting this block will display directly below the product name
                    if ($this->getChild('name.after')) {
                        $_nameAfterChildren = $this->getChild('name.after')->getSortedChildren();
                        foreach ($_nameAfterChildren as $_nameAfterChildName) {
                            $_nameAfterChild = $this->getChild('name.after')->getChild($_nameAfterChildName);
                            $_nameAfterChild->setProduct($_product);
                            echo $_nameAfterChild->toHtml();
                        }
                    }
                    ?>
                    <?php 
                    echo $this->getLayout()->createBlock('catalog/product_price')
                        ->setTemplate('catalog/product/customprice.phtml')
                        ->setProduct($_product)
                        ->setDisplayMinimalPrice(true)
                        ->setIdSuffix($idSuffix='amit')
                        ->toHtml();                    
                    //echo $this->getPriceHtml($_product, false) 
                    ?>
                    <?php if ($_product->getRatingSummary()): ?>
                    <?php echo $this->getReviewsSummaryHtml($_product, 'short') ?>
                    <?php endif; ?>
                    <?php /*
                    <div class="actions">
                        <?php if(!$_product->canConfigure() && $_product->isSaleable()): ?>
                            <button type="button" title="<?php echo $this->quoteEscape($this->__('Add to Cart')) ?>" class="button btn-atena" onclick="setLocation('<?php echo $this->getAddToCartUrl($_product) ?>')"><span><span><?php echo $this->__('Add to Cart') ?></span></span></button>
                        <?php elseif($_product->getStockItem() && $_product->getStockItem()->getIsInStock()): ?>
                            <a title="<?php echo $this->quoteEscape($this->__('View Details')) ?>" class="button" href="<?php echo $_product->getProductUrl() ?>"><?php echo $this->__('View Details') ?></a>
                        <?php else: ?>
                            <p class="availability out-of-stock"><span><?php echo $this->__('Out of stock') ?></span></p>
                        <?php endif; ?>
                        
                        <ul class="add-to-links">
                            <?php if ($this->helper('wishlist')->isAllow()) : ?>
                                <li><a href="<?php echo $this->helper('wishlist')->getAddUrl($_product) ?>" class="link-wishlist"><?php echo $this->__('Add to Wishlist') ?></a></li>
                            <?php endif; ?>
                            <?php if($_compareUrl=$this->getAddToCompareUrl($_product)): ?>
                                <li><span class="separator">|</span> <a href="<?php echo $_compareUrl ?>" class="link-compare"><?php echo $this->__('Add to Compare') ?></a></li>
                            <?php endif; ?>
                        </ul>
                    </div>
                    */ ?>
                </div>
            </li>
            <?php /*if ($i%$_columnCount==0 || $i==$_collectionSize): ?>
            <?php endif*/ ?>
        <?php 
        endforeach;        
        ?>
    </ul>
    <script type="text/javascript">
    decorateGeneric($$('ul.products-grid'), ['odd','even','first','last']);
    <?php
    /*
    foreach ($_productCollection as $_product):
        if ($sProduct = Mage::app()->getCache()->load('product_'.$_product->getId())) {
            $sProduct = unserialize($sProduct);
        } else {
            $sProduct = Mage::getModel('catalog/product')->load($_product->getId()); 
            Mage::app()->getCache()->save(serialize($sProduct), 'product_   '.$_product->getId());
        }
        if ($author_names = Mage::app()->getCache()->load('author_names_'.$_product->getId())) {
            $author_names = unserialize($author_names);
        } else {
            $categoryCollection = $_product->getCategoryCollection();
            $authors = [];
            foreach ($categoryCollection as $_category) {
                if ($_category->getParentId() == 20) {
                    $aData = Mage::getModel('catalog/category')->load($_category->getId())->getData();
                    $name = ($aData['your_attribute_code']) ? $aData['your_attribute_code'] : '';
                    $name.= ($aData['sukunimi'] && $name != '') ? ' ' . $aData['sukunimi'] : $aData['sukunimi'];
                    $authors[] = $name;
                }
            }
            $replace = ", ";
            $author_names = implode($replace, $authors);
            $pos = strrpos($author_names, ", ");
            if ($pos !== false) $author_names = substr_replace($author_names, ' & ', $pos, strlen($replace));

            Mage::app()->getCache()->save(serialize($author_names), 'author_names_'.$_product->getId());
        }        
        ?>
        boox.push({
                id: <?php echo $sProduct->getId(); ?>,
                name: '<?php echo addslashes(preg_replace( "/\r|\n/", "", $this->stripTags($sProduct->getName(), null, true))) ?>',
                desc: '<?php echo addslashes(preg_replace( "/\r|\n/", "", $this->stripTags($sProduct->getPresentationText(), null, true))) ?>',
                shortDesc: '<?php echo addslashes(preg_replace( "/\r|\n/", "", $this->stripTags($sProduct->getPresentationIngress(), null, true))) ?>',
                keywords: '<?php echo $this->stripTags($sProduct->getMetaKeywords(), null, true) ?>',
                author: '<?php echo $author_names ?>'
        }); <?php
    endforeach;
    */
    ?>
    </script>
    <?php endif; ?>
</div>
<?php endif; ?>
<?php
// Provides a block where additional page components may be attached, primarily good for in-page JavaScript
if ($this->getChild('after')) {
    $_afterChildren = $this->getChild('after')->getSortedChildren();
    foreach ($_afterChildren as $_afterChildName) {
        $_afterChild = $this->getChild('after')->getChild($_afterChildName);
        //set product collection on after blocks
        $_afterChild->setProductCollection($_productCollection);
        echo $_afterChild->toHtml();
    }
}
?>
